@model Get_A_Taxi.Web.Areas.Operator.ViewModels.OrderInputVM
<div id="orderInputPartial">
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.OrderId)
    @Html.HiddenFor(model => model.PhoneNumber)
    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })

    <div class="form-group">
        @*@Html.LabelFor(model => model.OrderAddress, htmlAttributes: new { @class = "control-label col-md-2" })*@
        <div class="col-md-offset-1 col-md-12">

            @Html.EditorFor(model => model.OrderAddress, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.OrderAddress) } })
            @Html.ValidationMessageFor(model => model.OrderAddress, "", new { @class = "text-danger" })
            @Html.ValidationMessageFor(model => model.OrderLatitude, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-1 col-md-12">
            @Html.EditorFor(model => model.DestinationAddress, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.DestinationAddress) } })
            @Html.ValidationMessageFor(model => model.DestinationAddress, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-1 col-md-12">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.FirstName) } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-1 col-md-12">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.LastName) } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-1 col-md-12">
            @Html.EditorFor(model => model.UserComment, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.UserComment) } })
            @Html.ValidationMessageFor(model => model.UserComment, "", new { @class = "text-danger" })
        </div>
    </div>
    @Html.HiddenFor(model => model.OrderLatitude)
    @Html.HiddenFor(model => model.OrderLongitude)
    @Html.HiddenFor(model => model.DestinationLatitude)
    @Html.HiddenFor(model => model.DestinationLongitude)
</div>

<script type="text/javascript">
    var orderInputPartial = function () {
        var startMarker;
        var endMarker;
        var addressMarkers = [];

        function cleanStartMarker() {
            if (startMarker != null) {
                gATMap.removeMarker(startMarker.id, addressMarkers);
            }
        }
        function cleanDestinationMarker() {
            if (endMarker != null) {
                gATMap.removeMarker(endMarker.id, addressMarkers);
            }
        }

        function cleanSearchMarkers() {
            cleanStartMarker();
            cleanDestinationMarker();
        }

        function addressClick() {
            @{
                // TODO: address search marker click
            }
        }

        function updateOrderAddress(lat, lng, formattedAddress) {
            cleanStartMarker();
            $('#OrderLatitude').val(lat);
            $('#OrderLongitude').val(lng);
            $('#OrderAddress').val(formattedAddress);
            startMarker = gATMap.addMarker(0, lat, lng, "/Content/Images/Map/green_m.png", formattedAddress, addressClick, addressMarkers);
        }

        function updateDestinationAddress(lat, lng, formattedAddress) {
            cleanDestinationMarker();
            $('#DestinationLatitude').val(lat);
            $('#DestinationLongitude').val(lng);
            $('#DestinationAddress').val(formattedAddress);
            endMarker = gATMap.addMarker(1, lat, lng, "/Content/Images/Map/yellow_m.png", formattedAddress, addressClick, addressMarkers);
        }

        function populate(data) {
            if (data.orderId() != null) {
                $('#OrderId').val(data.orderId());
            }
            $('#OrderLatitude').val(data.startLat());
            $('#OrderLongitude').val(data.startLng());
            $('#OrderAddress').val(data.start());
            $('#DestinationLatitude').val(data.endLat());
            $('#DestinationLongitude').val(data.endLng());
            $('#DestinationAddress').val(data.end());
            $('#FirstName').val(data.firstName());
            $('#LastName').val(data.lastName());
        }

        function populateInputs(data) {
            if (data != null) {
                $('#DestinationAddress').val("");
                $('#OrderAddress').val(data.orderAddress);
                $('#FirstName').val(data.firstName);
                $('#LastName').val(data.lastName);
            }
        }

        $("#OrderAddress").keyup(function (event) {
            console.log('"#OrderAddress" keyup');;
            if (event.keyCode == 13) {
                gATMap.getCoordinates($('#OrderAddress').val().trim(), updateOrderAddress);
            }
        });

        $("#DestinationAddress").keyup(function (event) {
            if (event.keyCode == 13) {
                gATMap.getCoordinates($('#DestinationAddress').val().trim(), updateDestinationAddress);
            }
        });

        return {
            updateOrderAddress: updateOrderAddress,
            updateDestinationAddress: updateDestinationAddress,
            cleanSearchMarkers: cleanSearchMarkers,
            cleanStartMarker: cleanStartMarker,
            cleanDestinationMarker: cleanDestinationMarker,
            populate: populate,
            populateInputs:populateInputs
        }

    }();

</script>