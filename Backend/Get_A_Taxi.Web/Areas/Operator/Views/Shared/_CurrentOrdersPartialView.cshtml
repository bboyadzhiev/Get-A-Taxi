<table class="table table-hover">
    <thead>
        <tr>
            <th>From</th>
            <th>To</th>
            <th>Name</th>
            <th>Phone</th>
            <th>Comment</th>
            <th>Taxi GSM</th>
        </tr>
    </thead>
    <tbody class="verticalTableScroll">
        <!-- ko foreach: orders -->
        @{// HACK: using &#123; - &#125; instead of { - } in data-binding due to RAZOR bug
        }
        <tr data-bind="click: clicked, attr: &#123;  class:  status() == 0 ? 'orderUnassignedRow' : ( status() == 1 ? 'orderWaitingRow' :'orderInProgressRow') &#125;">
            <td class="trimmedText" data-bind="text: start"></td>
            <td class="trimmedText" data-bind="text: end"></td>
            <td><span data-bind="text: firstName"></span> <span data-bind="text: lastName"></span></td>
            <td data-bind="text: custPhone"></td>
            <td data-bind="text: custComment"></td>
            <td data-bind="text: driverPhone"></td>
        </tr>
        
        <!-- /ko -->
        <tr data-bind="if: orders() == undefined"><td colspan="6"><strong> Fetching results</strong></td></tr>
        <tr data-bind="if: orders() != null  && orders().length == 0"><td colspan="6"><strong> No orders to display</strong></td></tr>
    </tbody>
</table>

<script type="text/javascript">
    // ORDERS
    var currentOrdersPartial = function (districtId, operatorId) {
        var unassignedMarkers = [];
        var waitingMarkers = [];
        var m = [];
        var ordersHub;
        function addOrdersMarkers(data) {
            for (var i = 0; i < data.length; i++) {
                if(data[i].status == 0){
                    gATMap.addMarker(data[i].orderId, data[i].startLat, data[i].startLng, '/Content/Images/Map/order_unassigned.png', data[i].firstName + ' ' + data[i].lastName, clkW, unassignedMarkers );
                }
                if(data[i].status == 1) {
                    gATMap.addMarker(data[i].orderId, data[i].startLat, data[i].startLng, '/Content/Images/Map/order_waiting.png', data[i].firstName + ' ' + data[i].lastName, clkP, waitingMarkers);
                }
            }
            console.log('Unassigned orders markers: '+unassignedMarkers.length);
        }

        function addNewOrderMarker(data) {
            if(data.status == 0){
                gATMap.addMarker(data.orderId, data.startLat, data.startLng, '/Content/Images/Map/order_unassigned.png', data.firstName, clkW, unassignedMarkers );
            }
            if(data.status == 1)
            {
                gATMap.addMarker(data.orderId, data.startLat, data.startLng, '/Content/Images/Map/order_waiting.png', data.firstName, clkP, waitingMarkers);
            }
        }

        function updateOrderMarker(data) {
            var removed = gATMap.removeMarker(data.orderId, waitingMarkers);
            if(removed == null){
                removed = gATMap.removeMarker(data.orderId, unassignedMarkers);
            }
        
            console.log(data);
            if (data.status == 0) { // Unassigned
                gATMap.addMarker(data.orderId, data.startLat, data.startLng, '/Content/Images/Map/order_unassigned.png', data.firstName, clkW, unassignedMarkers );
            }
            if (data.status == 1) { // Waiting
                gATMap.addMarker(data.orderId, data.startLat, data.startLng, '/Content/Images/Map/order_waiting.png', data.firstName, clkP, waitingMarkers);
            }
        }

        function clkW(markerId, lat, lng, content) {
            clickedMarker(markerId);
        }

        function clkP(markerId, lat, lng, content) {

        }

        function orderItemClick(data) {
            gATMap.setCenter(data.startLat(),data.startLng());
            gATMap.setZoom(17);
            $('#phoneSearchBox').val(data.custPhone());
            $('#phoneSearchBox').enabled = false;
            $('#orderInputPartial').appendTo('#updateOrderInputPlaceholder');
            $('#updateOrderPartial').fadeIn();
            $('#updateOrderPartial').trigger("reset");

            $('#PhoneNumber').val(data.custPhone());

            orderInputPartial.populate(data);

            $('#cancelOrderId').val(data.orderId());
        }

        var currentOrdersPartialVM = function (orders) {
           this.orders = ko.mapping.fromJS(orders);

           this.updateOrder = function (updatedOrder) {
                var order = ko.utils.arrayFirst(this.orders(), function (order) {
                    return order.orderId() == updatedOrder.orderId;
                });
                order.startLat(updatedOrder.startLat);
                order.startLng(updatedOrder.startLng);
                order.start(updatedOrder.start);
                order.endLat(updatedOrder.endLat);
                order.endLng(updatedOrder.endLng);
                order.end(updatedOrder.end);
                order.custComment(updatedOrder.custComment);
                order.status(updatedOrder.status);
            }

            this.addOrder = function (newOrder) {
                var observableOrder = ko.mapping.fromJS(newOrder);
                console.log(observableOrder);
                this.orders.push(observableOrder);
            }

            this.cancelOrder = function (orderId) {
                var order = ko.utils.arrayFirst(this.orders(), function (order) {
                    return order.orderId() == orderId;
                });
                this.orders.remove(order);
                console.log("Order removed from list!");
            }

            this.assignOrder = function (orderId) {
                var order = ko.utils.arrayFirst(this.orders(), function (order) {
                    return order.orderId() == orderId;
                });
              //  order.driverPhone
            }

            this.clicked = function (data, event) {
                orderItemClick(data);
            }

            this.clickedMarker = function (orderId) {
                var order = ko.utils.arrayFirst(this.orders(), function (order) {
                    return order.orderId() == orderId;
                });
                console.log('Clicked on marker with orderId ' + orderId);
                orderItemClick(order);
            }

        };

        ordersHub = $.connection.ordersHub;
        console.log(ordersHub);


        ordersHub.on("updateOrders", function (data) {
            console.log('Orders Hub Connected!')
            console.log('client.updateOrders');
            console.log(data);
            ko.applyBindings(currentOrdersPartialVM(data));
            addOrdersMarkers(data);
        });

        ordersHub.client.addedOrder = function (order) {
            console.log('New order received, adding to panel!');
            addNewOrderMarker(order);
            addOrder(order);
        }

        ordersHub.client.cancelledOrder = function (orderId) {
            console.log('Order '+orderId+' cancelled!');

            cancelOrder(orderId);
            var markerToRemove = gATMap.removeMarker(orderId, unassignedMarkers);
            if (markerToRemove == null) {
                markerToRemove = gATMap.removeMarker(orderId, waitingMarkers);
            }
        }

        ordersHub.client.updatedOrder = function (order) {
            console.log('Order '+order.orderId+' updated!');
            updateOrderMarker(order);
            updateOrder(order);
            //if(order.status == 0){ // Unassigned
            //    var markerToRemove = gATMap.removeMarker(order.orderId, waitingMarkers);
            //    updateOrderMarker(order);
            //    updateOrder(order);
            //}
            //if(order.status == 1){ // Waiting
            //    var markerToRemove = gATMap.removeMarker(order.orderId, unassignedMarkers);
            //    updateOrderMarker(order);
            //    updateOrder(order);
            //}
            //if(order.status > 1 ) {// Finished, Cancelled or InProgress
            //    var unassignedCleanup = gATMap.removeMarker(order.orderId, unassignedMarkers);
            //    var waitingCleanup = gATMap.removeMarker(order.orderId, waitingMarkers);
            //}
        }

        ordersHub.client.assignedOrder = function (orderId, taxiId) {
            var observableOrder = ko.utils.arrayFirst(orders(), function (ord) {
                return ord.orderId() == orderId;
            });
            observableOrder.status(1);
            console.log(observableOrder);
            //var jsOrder = ko.mapping.toJS(observableOrder);

            var availabeTaxies = taxies.availableMarkers;
            var busyTaxies = taxies.busyMarkers;
            if (availabeTaxies != null && availabeTaxies.length > 0) {
                var taxi = availabeTaxies.filter(function(t){ return t.taxiId == taxiId})[0];
                console.log(taxi);
                if(taxi!=null) observableOrder.driverPhone(taxi.phone());
            } else if(busyTaxies != null && busyTaxies.length > 0){
                var taxi = busyTaxies.filter(function(t){ return t.taxiId == taxiId})[0];
                console.log(taxi);
                if(taxi!=null) observableOrder.driverPhone(taxi.phone());
            }

            var assignedOrder = new Object();
            assignedOrder.status = 1;
            assignedOrder.orderId = orderId;
            assignedOrder.startLat = observableOrder.startLat();
            assignedOrder.startLng = observableOrder.startLng();
            assignedOrder.firstName = observableOrder.firstName();
            
            updateOrderMarker(assignedOrder);
            console.log(observableOrder.driverPhone);
            console.log('Order '+orderId+' assigned to taxi '+ taxiId);
        }

        $.connection.hub.start().done(function () {
            console.log("Connecting to Orders Hub...");
            ordersHub.invoke("open", districtId);
        });
        $(window).unload(function () {
            ordersHub.invoke("close", districtId);
        });
    }(district, operator);


   
</script>