@model Get_A_Taxi.Web.ViewModels.DistrictVM

@{
    ViewBag.Title = "Edit District Details";
}

<h2>@ViewBag.Title</h2>
<div id="map"></div>
<div class="mapHoverPanel">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model=>model.DistrictId)
        <div class="form-horizontal">
            <h4>DistrictVM</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.DistrictId)

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CenterLatitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CenterLatitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterLatitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CenterLongitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CenterLongitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterLongitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MapZoom, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MapZoom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MapZoom, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
                </div>
            </div>
        </div>
    }

</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    var lat = @ViewBag.Lat.ToString("0.000000000").Replace(",", ".");
    var lon = @ViewBag.Lon.ToString("0.000000000").Replace(",", ".");
    var defaultLat = parseFloat(lat)
    var defaultLon = parseFloat(lon);
</script>
<script src="http://maps.google.com/maps/api/js?sensor=true"></script>
@Scripts.Render("~/bundles/gmaps")
<script type="text/javascript">
    gATMap.initMap('#map', lat, lon, zoomChanged, mapClicked);
    var districtMap = function () {
        var districtMarkers = [];
        function updateUI(latlng, formattedAddress) {
            $('#CenterLatitude').val(latlng.lat());
            $('#CenterLongitude').val(latlng.lng());
            $('#address').val(formattedAddress);
            $('#Title').val(formattedAddress);
            gATMap.addMarker(0, latlng.lat(), latlng.lng(), "/Content/Images/Map/orange_m.png",  formattedAddress, clb, districtMarkers);
            $('#MapZoom').val(gATMap.map.zoom);
        }

        function clb(markerId, lat, lng, content) {
            // alert(content);
        }

        $("#address").keyup(function (event) {
            if (event.keyCode == 13) {
                gATMap.getCoordinates($('#address').val().trim(), updateUI);
            }
        });

        function getInputAddress(latInput, lngInput, updateUI) {
            gATMap.getAddress($(latInput).val(), $(lngInput).val(), updateUI)
        }

        $('#getAddress').click(function (e) {
            getInputAddress('#CenterLatitude', '#CenterLongitude', '#Title')

        });
        return {
            updateUI:updateUI
        }

    }();

    $('#geocoding_form').submit(function (e) {
        e.preventDefault();
        gATMap.getCoordinates($('#address').val().trim(), createDistrict.updateUI);
    });

    function zoomChanged(map) {
        $('#MapZoom').val(map.zoom);
    }

    function mapClicked(e) {
        gATMap.clearMarkers();
        gATMap.setCenter(e.latLng.lat(), e.latLng.lng());
        gATMap.getAddress(e.latLng.lat(),  e.latLng.lng(), createDistrict.updateUI);
    }
</script>
