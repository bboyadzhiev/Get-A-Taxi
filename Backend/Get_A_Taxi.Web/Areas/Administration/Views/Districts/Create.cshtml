@model Get_A_Taxi.Web.ViewModels.DistrictVM

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<div id="map">
</div>
<div id="createDistrictPanel">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>DistrictVM</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CenterLattitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CenterLattitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterLattitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CenterLongitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CenterLongitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterLongitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MapZoom, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MapZoom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MapZoom, "", new { @class = "text-danger" })
                </div>
                <input type="button" value="getzoom" onclick="getZoom()" />
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div class="form-group">
        <form method="post" id="geocoding_form">
            <div class="col-md-offset-2 col-md-10">
                <label for="address">Address:</label>
                <div class="input">
                    <input type="text" id="address" name="address" />
                    <input type="submit" class="btn btn-default" value="Search" />
                </div>
            </div>
        </form>
    </div>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
<script src="http://maps.google.com/maps/api/js?sensor=true"></script>
@Scripts.Render("~/bundles/gmaps")
<script type="text/javascript">
    function getZoom() {
        $('#MapZoom').val(map.zoom);
    }
    $(document).ready(function () {
        map = new GMaps({
            div: '#map',
            lat: -12.043333,
            lng: -77.028333,
            zoom_changed: function (map) {
                $('#MapZoom').val(map.getZoom());
            }
        });

        $('#geocoding_form').submit(function (e) {
            e.preventDefault();
            GMaps.geocode({
                address: $('#address').val().trim(),
                callback: function (results, status) {
                    if (status == 'OK') {
                        var latlng = results[0].geometry.location;
                        map.setCenter(latlng.lat(), latlng.lng());
                        map.addMarker({
                            lat: latlng.lat(),
                            lng: latlng.lng()
                        });
                        $('#CenterLattitude').val(latlng.lat());
                        $('#CenterLongitude').val(latlng.lng());
                        $('#MapZoom').val(map.getZoom());
                        $('#Title').val($('#address').val());
                    }
                }
            });
        });
    });
</script>
