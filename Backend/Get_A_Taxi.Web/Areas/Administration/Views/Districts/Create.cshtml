@model Get_A_Taxi.Web.ViewModels.DistrictVM

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

<div id="map"></div>
<div class="mapHoverPanel">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>DistrictVM</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CenterLattitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CenterLattitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterLattitude, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CenterLongitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CenterLongitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterLongitude, "", new { @class = "text-danger" })
                </div>
            </div>
            <input type="button" value="getAddress" id="getAddress" />
            <div class="form-group">
                @Html.LabelFor(model => model.MapZoom, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MapZoom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MapZoom, "", new { @class = "text-danger" })
                </div>
                <input type="button" value="getzoom" onclick="getZoom()" />
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div class="form-group">
        <form method="post" id="geocoding_form">
            <div class="col-md-offset-2 col-md-10">
                <label for="address">Address:</label>
                <div class="input">
                    <input type="text" id="address" name="address" on/>
                    <input type="submit" class="btn btn-default" value="Search" />
                </div>
            </div>
        </form>
    </div>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    var lat = @ViewBag.Lat.ToString("0.000000000").Replace(",", ".");
    var lon = @ViewBag.Lng.ToString("0.000000000").Replace(",", ".");
    var defaultLat = parseFloat(lat)
    var defaultLon = parseFloat(lon);
</script>
<script src="http://maps.google.com/maps/api/js?sensor=true"></script>
@Scripts.Render("~/bundles/gmaps")
<script type="text/javascript">
    /// <reference path="/Scripts/gmaps.js" />
    var districtMarkers = [];
    function updateUI(latlng, formattedAddress) {
        $('#CenterLattitude').val(latlng.lat());
        $('#CenterLongitude').val(latlng.lng());
        $('#address').val(formattedAddress);
        $('#Title').val(formattedAddress);
        markers.push( addMarker(0, latlng, "/Content/Images/Map/orange_m.png",  formattedAddress, clb, districtMarkers));
        console.log(districtMarkers);
    }

    function clb( latlng, content) {
        alert(content);
    }

    $('#geocoding_form').submit(function (e) {
        e.preventDefault();
        getCoordinates($('#address').val().trim(), updateUI);
    });


    function getInputAddress(latInput, lngInput, updateUI) {
        getAddress($(latInput).val(), $(lngInput).val(), updateUI)
    }

    $('#getAddress').click(function (e) {
        getInputAddress('#CenterLattitude', '#CenterLongitude', '#Title')
  
    });

    function zoomChanged(map) {
        $('#MapZoom').val(map.zoom);
    }

    function mapClicked(e) {
        console.log(e);
        map.removeMarkers();
        map.setCenter(e.latLng.lat(), e.latLng.lng());
        getAddress(e.latLng.lat(),  e.latLng.lng(), updateUI);
    }

</script>
